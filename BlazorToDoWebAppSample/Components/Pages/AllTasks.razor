@page "/tasks"
@using BlazorToDoWebAppSample.Components.Data
@using BlazorToDoWebAppSample.Components.Controllers
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@inject IDbContextFactory<BlazorToDoWebAppSampleDbContext> DbFactory

<PageTitle>All Tasks</PageTitle>

<h3>All Tasks</h3>

@if (tasks == null || tasks.Length == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Title</th>
                <th>Description</th>
                <th>IsCompleted</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Id</td>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.IsCompleted</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Models.TodoTask[]? tasks = null;
    private TodoTasksController? todoTasksController;

    protected override async Task OnInitializedAsync()
    {
        todoTasksController = new TodoTasksController(DbFactory);
        await todoTasksController.DeleteAllTodoTasksAsync();

        await todoTasksController.AddTodoTaskAsync(new Models.TodoTask
            {
                Id = 1,
                Title = "First Task",
                Description = "This is first todo task.",
                IsCompleted = false,
            });
        await todoTasksController.AddTodoTaskAsync(new Models.TodoTask
            {
                Id = 2,
                Title = "Second Task",
                Description = "This is second todo task.",
                IsCompleted = false,
            });
        tasks = (await todoTasksController.GetAllTodoTasksAsync()).ToArray();

        await base.OnInitializedAsync();
    }
}
